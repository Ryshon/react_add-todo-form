{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","TodoList","todos","map","App","useState","todosFromServer","copyTodos","setCopyTodos","selectedUserName","getSelectedUserName","newTitle","getNewTitle","errorTitle","setErrorTitle","errorUser","setErrorUser","maxId","Math","max","createTodo","userName","usersFromServer","find","newTodo","addHandler","e","preventDefault","useEffect","action","method","type","placeholder","value","onChange","currentTarget","target","disabled","selected","onClick","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2BC3DI,GACb,CACEH,GAAI,EACJI,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEN,GAAI,GACJI,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEN,GAAI,EACJI,MAAO,qCACPC,WAAW,EACXC,OAAQ,I,OCVCC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClCP,EAAgBO,EAAhBP,KAAME,EAAUK,EAAVL,MAEd,OACE,mBAAGM,UAAU,WAAWC,KAAI,iBAAYP,GAAxC,SACGF,KCJMU,EAA2B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEvCR,EAGEQ,EAHFR,MACAC,EAEEO,EAFFP,UACAG,EACEI,EADFJ,KAGF,OACE,0BACE,UAASI,EAAKZ,GACdS,UAAS,mBAAcJ,EAAY,sBAAwB,IAF7D,UAIE,oBAAII,UAAU,kBAAd,SACGL,IAGFI,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QChBlBK,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASL,UAAU,WAAnB,SACGK,EAAMC,KAAI,SAACH,GAAD,OACT,cAAC,EAAD,CAAwBA,KAAMA,GAAfA,EAAKZ,UCHfgB,EAAM,WACjB,MAAkCC,mBAAS,YAAIC,IAA/C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAgDH,mBAAS,IAAzD,mBAAOI,EAAP,KAAyBC,EAAzB,KACA,EAAgCL,mBAAS,IAAzC,mBAAOM,EAAP,KAAiBC,EAAjB,KACA,EAAoCP,oBAAS,GAA7C,mBAAOQ,EAAP,KAAmBC,EAAnB,KACA,EAAkCT,oBAAS,GAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KAEIC,EAAQC,KAAKC,IAAL,MAAAD,KAAI,YAAQZ,EAAgBH,KAAI,SAAAH,GAAI,OAAKA,EAAKZ,QAepDgC,EAAa,WACjB,IAfgBC,EAeVzB,GAfUyB,EAeMZ,EAdfa,EAAgBC,MAAK,SAAA3B,GAAI,OAAIA,EAAKP,OAASgC,MAAa,MAgB/D,GAAIzB,GAAQe,EAAU,CACpB,IAAMa,EAAU,CACdpC,GAAI6B,GAAS,EACbzB,MAAOmB,EACPlB,WAAW,EACXC,OAAQE,EAAKR,IAGfoB,GAAa,SAAAN,GAAK,4BAAQA,GAAR,CAAesB,OACjCZ,EAAY,IACZF,EAAoB,IAGtB,OAAO,MAGHe,EAAa,SAACC,GAClBA,EAAEC,iBACFP,IA9BKT,GACHG,GAAc,GAGXL,GACHO,GAAa,IA6BXd,EAAgBK,EAAUJ,KAAI,SAAAH,GAClC,OAAO,2BACFA,GADL,IAEEJ,KAAM0B,EAAgBC,MAAK,SAAA3B,GAAI,OAAII,EAAKN,SAAWE,EAAKR,WAc5D,OAVAwC,qBAAU,WACJjB,GACFG,GAAc,GAGZL,GACFO,GAAa,MAKf,sBAAKnB,UAAU,MAAf,UACE,+CAEA,uBAAMgC,OAAO,aAAaC,OAAO,OAAjC,UACE,sBAAKjC,UAAU,QAAf,UACE,2CAEE,uBACEkC,KAAK,OACL,UAAQ,aACRC,YAAY,gBACZC,MAAOtB,EACPuB,SAAU,SAACR,GACTd,EAAYc,EAAES,cAAcF,aAIhCpB,GACI,sBAAMhB,UAAU,QAAhB,qCAGR,sBAAKA,UAAU,QAAf,UACE,0CAEE,yBACE,UAAQ,aACRqC,SAAU,SAACR,GAAD,OAAOhB,EAAoBgB,EAAEU,OAAOH,QAFhD,WAIIxB,GACG,wBAAQwB,MAAM,IAAII,UAAQ,EAACC,UAAQ,EAAnC,2BACJhB,EAAgBnB,KAAI,SAAAP,GAAI,OACvB,wBAEEqC,MAAOrC,EAAKP,KAFd,SAIGO,EAAKP,MAHDO,EAAKP,eAQjB0B,GACI,sBAAMlB,UAAU,QAAhB,qCAGP,wBACEkC,KAAK,SACL,UAAQ,eACRQ,QAAS,SAACb,GAAD,OAAOD,EAAWC,IAH7B,oBASF,cAAC,EAAD,CAAUxB,MAAOA,QC5HvBsC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.f27838de.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React from 'react';\nimport { User } from '../type';\n\n type Props = {\n   user: User,\n };\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../type';\n\n type Props = {\n   todo: Todo,\n };\n\nexport const TodoInfo:React.FC<Props> = ({ todo }) => {\n  const {\n    title,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={todo.id}\n      className={`TodoInfo ${completed ? 'TodoInfo--completed' : ''}`}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../type';\n\n type Props = {\n   todos: Todo[],\n };\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todo) => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport { useState, useEffect } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nimport { User, Todo } from './components/type';\n\nimport { TodoList } from './components/TodoList/TodoList';\n\nexport const App = () => {\n  const [copyTodos, setCopyTodos] = useState([...todosFromServer]);\n  const [selectedUserName, getSelectedUserName] = useState('');\n  const [newTitle, getNewTitle] = useState('');\n  const [errorTitle, setErrorTitle] = useState(false);\n  const [errorUser, setErrorUser] = useState(false);\n\n  let maxId = Math.max(...todosFromServer.map(todo => +todo.id));\n  const findUser = (userName: string): User | null => {\n    return usersFromServer.find(user => user.name === userName) || null;\n  };\n\n  const checkError = () => {\n    if (!newTitle) {\n      setErrorTitle(true);\n    }\n\n    if (!selectedUserName) {\n      setErrorUser(true);\n    }\n  };\n\n  const createTodo = () => {\n    const user = findUser(selectedUserName);\n\n    if (user && newTitle) {\n      const newTodo = {\n        id: maxId += 1,\n        title: newTitle,\n        completed: false,\n        userId: user.id,\n      };\n\n      setCopyTodos(todos => [...todos, newTodo]);\n      getNewTitle('');\n      getSelectedUserName('');\n    }\n\n    return null;\n  };\n\n  const addHandler = (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    e.preventDefault();\n    createTodo();\n    checkError();\n  };\n\n  const todos: Todo[] = copyTodos.map(todo => {\n    return {\n      ...todo,\n      user: usersFromServer.find(user => todo.userId === user.id),\n    };\n  });\n\n  useEffect(() => {\n    if (newTitle) {\n      setErrorTitle(false);\n    }\n\n    if (selectedUserName) {\n      setErrorUser(false);\n    }\n  });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\">\n        <div className=\"field\">\n          <label>\n            Title:\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={newTitle}\n              onChange={(e) => {\n                getNewTitle(e.currentTarget.value);\n              }}\n            />\n          </label>\n          {(errorTitle\n             && <span className=\"error\">Please enter a title</span>)}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n            <select\n              data-cy=\"userSelect\"\n              onChange={(e) => getSelectedUserName(e.target.value)}\n            >\n              {!selectedUserName\n               && (<option value=\"0\" disabled selected>Choose a user</option>)}\n              {usersFromServer.map(user => (\n                <option\n                  key={user.name}\n                  value={user.name}\n                >\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n          {errorUser\n           && (<span className=\"error\">Please choose a user</span>)}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          onClick={(e) => addHandler(e)}\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}